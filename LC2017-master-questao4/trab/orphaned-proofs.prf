("sorting_seq" sorting_seq occurrences_TCC5 0 (occurrences_TCC5-1 nil 3651245593 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^ const-decl "finseq" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("sorting_seq" sorting_seq occurrences_TCC4 0 (occurrences_TCC4-1 nil 3651245593 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("sorting_seq" sorting_seq occurrences_TCC3 0 (occurrences_TCC3-1 nil 3651245593 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^ const-decl "finseq" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("sorting_seq" sorting_seq occurrences_TCC2 0 (occurrences_TCC2-1 nil 3651245593 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("sorting_seq" sorting_seq occurrences_TCC1 0 (occurrences_TCC1-1 nil 3651245593 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("sorting_seq" |sorting_seq| |occurrences_TCC5| 0 (|occurrences_TCC5-1| NIL 3651245593 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (>= CONST-DECL "bool" REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (REAL_GT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (INT_MINUS_INT_IS_INT APPLICATION-JUDGEMENT "int" INTEGERS NIL) (FINSEQ_APPL CONST-DECL "[below[length(fs)] -> T]" FINITE_SEQUENCES NIL) (EMPTY_SEQ CONST-DECL "finseq" FINITE_SEQUENCES NIL) (MIN CONST-DECL "{p: real | p <= m AND p <= n}" REAL_DEFS NIL) (^ CONST-DECL "finseq" FINITE_SEQUENCES NIL) (POSINT_PLUS_NNINT_IS_POSINT APPLICATION-JUDGEMENT "posint" INTEGERS NIL)) NIL NIL NIL NIL))("sorting_seq" |sorting_seq| |occurrences_TCC4| 0 (|occurrences_TCC4-1| NIL 3651245593 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL ((BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (>= CONST-DECL "bool" REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (INT_MINUS_INT_IS_INT APPLICATION-JUDGEMENT "int" INTEGERS NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (FINSEQ_APPL CONST-DECL "[below[length(fs)] -> T]" FINITE_SEQUENCES NIL)) NIL NIL NIL NIL))("sorting_seq" |sorting_seq| |occurrences_TCC3| 0 (|occurrences_TCC3-1| NIL 3651245593 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (>= CONST-DECL "bool" REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (REAL_GT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (INT_MINUS_INT_IS_INT APPLICATION-JUDGEMENT "int" INTEGERS NIL) (FINSEQ_APPL CONST-DECL "[below[length(fs)] -> T]" FINITE_SEQUENCES NIL) (EMPTY_SEQ CONST-DECL "finseq" FINITE_SEQUENCES NIL) (MIN CONST-DECL "{p: real | p <= m AND p <= n}" REAL_DEFS NIL) (^ CONST-DECL "finseq" FINITE_SEQUENCES NIL) (POSINT_PLUS_NNINT_IS_POSINT APPLICATION-JUDGEMENT "posint" INTEGERS NIL)) NIL NIL NIL NIL))("sorting_seq" |sorting_seq| |occurrences_TCC2| 0 (|occurrences_TCC2-1| NIL 3651245593 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL ((BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (>= CONST-DECL "bool" REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (INT_MINUS_INT_IS_INT APPLICATION-JUDGEMENT "int" INTEGERS NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (FINSEQ_APPL CONST-DECL "[below[length(fs)] -> T]" FINITE_SEQUENCES NIL)) NIL NIL NIL NIL))("sorting_seq" |sorting_seq| |occurrences_TCC1| 0 (|occurrences_TCC1-1| NIL 3651245593 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL ((REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL)) NIL NIL NIL NIL))